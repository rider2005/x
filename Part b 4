Write a C/C++ program to create a file called file1 in blocking read-write mode and show how you can use fcntl api to modify its access control flags to non-blocking read-write mode.



#include<stdio.h>
#include<sys/types.h>
#include<fcntl.h> fcntl, short for file control
#include<stdlib.h>
int main(int argc,char *argv[])
{
int accmode,val;
if(argc!=2)
{
fprintf(stderr,"usage:%s <description>",argv[0]);
exit(1);
}
val=fcntl(atoi(argv[1]),F_GETFL,0); atoi(argv[1]) converts the command-line argument from a string to an integer
F_GETFL command in fcntl returns the file access mode (e.g., O_RDONLY, O_WRONLY, O_RDWR) and status flags (e.g., O_APPEND, O_NONBLOCK).
if(val<0)
{
perror("fcntl error for fd");
exit(1);
}
accmode=val & O_ACCMODE; /*the file status flag value to produce a value representing the file access mode. The mode will be O_RDONLY, O_WRONLY, or O_RDWR.*/

if(accmode==O_RDONLY)
printf("read only");
else if(accmode==O_WRONLY) 
printf("Write only");
else if(accmode==O_RDWR)
printf("read write");
else
{
fprintf(stderr,"unknown access mode");
exit(1);
}
if(val & O_APPEND)
printf(",append");
if(val & O_NONBLOCK)
printf(",nonblocking");
if(val & O_SYNC)
printf(",synchronous write"); /*wait for writes to complete (data and attributes)*/
putchar('\n');
exit(0);

}
